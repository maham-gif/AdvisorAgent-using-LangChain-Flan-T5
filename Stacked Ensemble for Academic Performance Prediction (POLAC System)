{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":8165591,"sourceType":"datasetVersion","datasetId":4831777}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, StackingRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import r2_score, mean_squared_error\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/student-performance-data/StudentPerformanceFactors.csv')  # Update path if needed\ndf.head()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Separate features and target\nX = df.drop(columns=['Target'])  # Change 'Target' to actual target column name\ny = df['Target']\n\n# Identify column types\ncategorical_cols = X.select_dtypes(include=['object', 'category']).columns.tolist()\nnumerical_cols = X.select_dtypes(include=['int64', 'float64']).columns.tolist()\n\n# Define transformers\nnumerical_pipeline = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='mean')),\n    ('scaler', StandardScaler())\n])\n\ncategorical_pipeline = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('encoder', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# ColumnTransformer\npreprocessor = ColumnTransformer(transformers=[\n    ('num', numerical_pipeline, numerical_cols),\n    ('cat', categorical_pipeline, categorical_cols)\n])\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Base regressors\nbase_learners = [\n    ('rf', RandomForestRegressor(n_estimators=100, random_state=42)),\n    ('gbr', GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)),\n    ('mlp', MLPRegressor(hidden_layer_sizes=(64,), max_iter=500, random_state=42))\n]\n\n# Meta-model\nmeta_model = LinearRegression()\n\n# Stacking regressor\nstacking_model = StackingRegressor(estimators=base_learners, final_estimator=meta_model, cv=5)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"full_pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', stacking_model)\n])\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Cross-validation\ncv = KFold(n_splits=5, shuffle=True, random_state=42)\n\nr2_scores = cross_val_score(full_pipeline, X, y, cv=cv, scoring='r2')\nrmse_scores = -cross_val_score(full_pipeline, X, y, cv=cv, scoring='neg_root_mean_squared_error')\n\nprint(f\"Mean R² Score: {np.mean(r2_scores):.4f}\")\nprint(f\"Mean RMSE: {np.mean(rmse_scores):.4f}\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Fit the final model\nfull_pipeline.fit(X, y)\n\n# Predict on same data (or new test set)\ny_pred = full_pipeline.predict(X)\n\n# Evaluate\nprint(\"Final R² Score:\", r2_score(y, y_pred))\nprint(\"Final RMSE:\", mean_squared_error(y, y_pred, squared=False))\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'ID': df.index,\n    'Actual': y,\n    'Predicted': y_pred\n})\n\nsubmission.to_csv(\"stacking_model_predictions.csv\", index=False)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}